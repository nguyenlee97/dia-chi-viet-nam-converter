// Mock preprocessing script for demo purposes
// In real implementation, this would process the actual Vietnamese administrative data
// and generate selection_tree.json and detailed_ward_data.json

const fs = require('fs');
const path = require('path');

// Mock data structure for demonstration
const mockSelectionTree = {
    "H√† N·ªôi": {
        "Qu·∫≠n Ba ƒê√¨nh": [
            "Ph∆∞·ªùng ƒêi·ªán Bi√™n", 
            "Ph∆∞·ªùng ƒê·ªôi C·∫•n", 
            "Ph∆∞·ªùng Li·ªÖu Giai",
            "Ph∆∞·ªùng Ng·ªçc H√†",
            "Ph∆∞·ªùng Ph√∫c X√°"
        ],
        "Qu·∫≠n Ho√†n Ki·∫øm": [
            "Ph∆∞·ªùng Ch∆∞∆°ng D∆∞∆°ng", 
            "Ph∆∞·ªùng C·ª≠a Nam", 
            "Ph∆∞·ªùng ƒê·ªìng Xu√¢n",
            "Ph∆∞·ªùng H√†ng B√†i",
            "Ph∆∞·ªùng H√†ng B·ªì"
        ],
        "Qu·∫≠n Hai B√† Tr∆∞ng": [
            "Ph∆∞·ªùng B√°ch Khoa", 
            "Ph∆∞·ªùng B·∫°ch ƒê·∫±ng", 
            "Ph∆∞·ªùng C·∫ßu D·ªÅn",
            "Ph∆∞·ªùng ƒê·ªëng M√°c",
            "Ph∆∞·ªùng L√™ ƒê·∫°i H√†nh"
        ]
    },
    "TP. H·ªì Ch√≠ Minh": {
        "Qu·∫≠n 1": [
            "Ph∆∞·ªùng B·∫øn Ngh√©", 
            "Ph∆∞·ªùng B·∫øn Th√†nh", 
            "Ph∆∞·ªùng C·∫ßu Kho",
            "Ph∆∞·ªùng C·∫ßu √îng L√£nh",
            "Ph∆∞·ªùng C√¥ Giang"
        ],
        "Qu·∫≠n 3": [
            "Ph∆∞·ªùng 01", 
            "Ph∆∞·ªùng 02", 
            "Ph∆∞·ªùng 03",
            "Ph∆∞·ªùng 04",
            "Ph∆∞·ªùng 05"
        ],
        "Qu·∫≠n B√¨nh Th·∫°nh": [
            "Ph∆∞·ªùng 01", 
            "Ph∆∞·ªùng 02", 
            "Ph∆∞·ªùng 03",
            "Ph∆∞·ªùng 11",
            "Ph∆∞·ªùng 12"
        ]
    },
    "ƒê√† N·∫µng": {
        "Qu·∫≠n H·∫£i Ch√¢u": [
            "Ph∆∞·ªùng H·∫£i Ch√¢u I", 
            "Ph∆∞·ªùng H·∫£i Ch√¢u II", 
            "Ph∆∞·ªùng Thanh B√¨nh",
            "Ph∆∞·ªùng Thu·∫≠n Ph∆∞·ªõc",
            "Ph∆∞·ªùng Th·∫°ch Thang"
        ],
        "Qu·∫≠n Thanh Kh√™": [
            "Ph∆∞·ªùng Thanh Kh√™ ƒê√¥ng", 
            "Ph∆∞·ªùng Thanh Kh√™ T√¢y", 
            "Ph∆∞·ªùng Tam Thu·∫≠n",
            "Ph∆∞·ªùng An Kh√™",
            "Ph∆∞·ªùng T√¢n Ch√≠nh"
        ]
    }
};

const mockDetailedWardData = new Map([
    ["H√† N·ªôi|Qu·∫≠n Ba ƒê√¨nh|Ph∆∞·ªùng ƒêi·ªán Bi√™n", {
        is_splitted: false,
        new_address: "Ph∆∞·ªùng ƒêi·ªán Bi√™n, Qu·∫≠n Ba ƒê√¨nh, TP. H√† N·ªôi"
    }],
    ["TP. H·ªì Ch√≠ Minh|Qu·∫≠n 1|Ph∆∞·ªùng B·∫øn Ngh√©", {
        is_splitted: true,
        new_address: {
            new_province_name: "TP. H·ªì Ch√≠ Minh",
            new_ward_name: [
                {
                    new_ward_name: "Ph∆∞·ªùng B·∫øn Ngh√© ƒê√¥ng",
                    centroid: [106.7009, 10.7769],
                    new_ward_coordinate: [[[
                        [106.700, 10.775], [106.702, 10.775], 
                        [106.702, 10.778], [106.700, 10.778], 
                        [106.700, 10.775]
                    ]]]
                },
                {
                    new_ward_name: "Ph∆∞·ªùng B·∫øn Ngh√© T√¢y",
                    centroid: [106.6989, 10.7759],
                    new_ward_coordinate: [[[
                        [106.697, 10.774], [106.699, 10.774], 
                        [106.699, 10.777], [106.697, 10.777], 
                        [106.697, 10.774]
                    ]]]
                }
            ]
        }
    }],
    ["ƒê√† N·∫µng|Qu·∫≠n H·∫£i Ch√¢u|Ph∆∞·ªùng H·∫£i Ch√¢u I", {
        is_splitted: false,
        new_address: "Ph∆∞·ªùng H·∫£i Ch√¢u I, Qu·∫≠n H·∫£i Ch√¢u, TP. ƒê√† N·∫µng"
    }]
]);

// Ensure directories exist
const apiDataDir = path.join(__dirname, '..', 'api', '_data');
if (!fs.existsSync(apiDataDir)) {
    fs.mkdirSync(apiDataDir, { recursive: true });
}

// Write the mock data files
try {
    fs.writeFileSync(
        path.join(apiDataDir, 'selection_tree.json'),
        JSON.stringify(mockSelectionTree, null, 2)
    );
    
    fs.writeFileSync(
        path.join(apiDataDir, 'detailed_ward_data.json'),
        JSON.stringify([...mockDetailedWardData], null, 2)
    );
    
    console.log('‚úÖ Mock data files generated successfully!');
    console.log(`üìÅ Files created in: ${apiDataDir}`);
    console.log('üìù selection_tree.json - Contains province/district/ward hierarchy');
    console.log('üìù detailed_ward_data.json - Contains ward transformation data');
} catch (error) {
    console.error('‚ùå Error generating mock data:', error);
    process.exit(1);
}